@charset "UTF-8";
/* 
  j'importe une bibliotheque de mixin
  elle me sert a definir certains element css redondant afin de garder une unité sur l'ensemble de l'application
  il suffit de les appeler comme suit :
  @include nomDeLaMixin();
  le contenu de la mixin sera alors ajouté à l'endroit ou elle est appelé 
*/
* {
  box-sizing: border-box;
}

img {
  -webkit-user-select: none;
  -moz-user-select: none;
  -o-user-select: none;
  -ms-user-select: none;
      user-select: none;
}

ul,
li,
a {
  text-decoration: none;
  list-style: none;
}

p,
h1,
h2,
h3,
h4 {
  margin: 0;
  padding: 0;
}

html,
body {
  padding: 0;
  margin: 0;
  font-family: Arial, Sans-serif;
}

body {
  width: 100vw;
  height: 100vh;
  overflow: hidden;
}

@media (max-width: 500px) {
  body {
    height: auto;
    overflow: auto;
    overflow-x: hidden;
  }
}

h1 {
  margin: 0 auto;
  font-size: 30px;
  text-align: center;
  margin-bottom: 45px;
}

@media (max-width: 500px) {
  h1 {
    margin-bottom: 20px;
  }
}

.board {
  position: relative;
  flex-direction: row;
  flex-wrap: wrap;
  /* 
    je calcule la taille necessaire a mon board;
    on a 36 carte en tout (18 paires) donc 4 ligne de 9
    qui font 100px de large
    j'y rajoute 5px de marge sur les côté
  */
  width: calc(9 * 100px + 9 * 10px);
  margin: 0 auto;
  background: #858585;
  display: none;
}

.board.display {
  display: flex;
}

.board .win,
.board .lose {
  width: 100%;
  height: 100%;
  position: absolute;
  z-index: 10;
  display: none;
  justify-content: center;
  align-items: center;
}

.board .win.display,
.board .lose.display {
  display: flex;
}

.board .win .win_animation,
.board .lose .win_animation {
  width: 50%;
}

.board .game {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  position: relative;
  overflow: hidden;
}

.board .game.disable::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: #434343;
  opacity: 0.7;
  filter: blur(107px);
}

.board .game .item {
  position: relative;
  width: 100px;
  height: 100px;
  margin: 5px;
  cursor: pointer;
  overflow: hidden;
  perspective: 1000px;
}

.board .game .item .card {
  position: relative;
  width: 100%;
  height: 100%;
  transition: transform 0.8s;
  transform-style: preserve-3d;
}

.board .game .item .card img {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  -webkit-backface-visibility: hidden;
  /* Safari */
  backface-visibility: hidden;
}

.board .game .item .card img.back {
  width: 100%;
}

.board .game .item .card img.front {
  width: 100%;
  transform: rotateY(180deg);
  bottom: unset;
  /*
              on utilise la boucle for pour éviter de se répeter
              si jamais on ne l'utilisait pas il aurait fallut donner une valeur pour chaque carte
              &.card_1{
                top : -100px
              }
              &.card_2{
                top : -200px
              }
              etc ...

              Gros gains de temps et pas de risque de se tromper
            */
}

.board .game .item .card img.front.card_0 {
  top: calc(0px - 0px);
}

.board .game .item .card img.front.card_1 {
  top: calc(0px - 100px);
}

.board .game .item .card img.front.card_2 {
  top: calc(0px - 200px);
}

.board .game .item .card img.front.card_3 {
  top: calc(0px - 300px);
}

.board .game .item .card img.front.card_4 {
  top: calc(0px - 400px);
}

.board .game .item .card img.front.card_5 {
  top: calc(0px - 500px);
}

.board .game .item .card img.front.card_6 {
  top: calc(0px - 600px);
}

.board .game .item .card img.front.card_7 {
  top: calc(0px - 700px);
}

.board .game .item .card img.front.card_8 {
  top: calc(0px - 800px);
}

.board .game .item .card img.front.card_9 {
  top: calc(0px - 900px);
}

.board .game .item .card img.front.card_10 {
  top: calc(0px - 1000px);
}

.board .game .item .card img.front.card_11 {
  top: calc(0px - 1100px);
}

.board .game .item .card img.front.card_12 {
  top: calc(0px - 1200px);
}

.board .game .item .card img.front.card_13 {
  top: calc(0px - 1300px);
}

.board .game .item .card img.front.card_14 {
  top: calc(0px - 1400px);
}

.board .game .item .card img.front.card_15 {
  top: calc(0px - 1500px);
}

.board .game .item .card img.front.card_16 {
  top: calc(0px - 1600px);
}

.board .game .item .card img.front.card_17 {
  top: calc(0px - 1700px);
}

@media (max-width: 1000px) {
  .board .game .item .card img.front.card_0 {
    top: calc(0px - 0px);
  }
  .board .game .item .card img.front.card_1 {
    top: calc(0px - 75px);
  }
  .board .game .item .card img.front.card_2 {
    top: calc(0px - 150px);
  }
  .board .game .item .card img.front.card_3 {
    top: calc(0px - 225px);
  }
  .board .game .item .card img.front.card_4 {
    top: calc(0px - 300px);
  }
  .board .game .item .card img.front.card_5 {
    top: calc(0px - 375px);
  }
  .board .game .item .card img.front.card_6 {
    top: calc(0px - 450px);
  }
  .board .game .item .card img.front.card_7 {
    top: calc(0px - 525px);
  }
  .board .game .item .card img.front.card_8 {
    top: calc(0px - 600px);
  }
  .board .game .item .card img.front.card_9 {
    top: calc(0px - 675px);
  }
  .board .game .item .card img.front.card_10 {
    top: calc(0px - 750px);
  }
  .board .game .item .card img.front.card_11 {
    top: calc(0px - 825px);
  }
  .board .game .item .card img.front.card_12 {
    top: calc(0px - 900px);
  }
  .board .game .item .card img.front.card_13 {
    top: calc(0px - 975px);
  }
  .board .game .item .card img.front.card_14 {
    top: calc(0px - 1050px);
  }
  .board .game .item .card img.front.card_15 {
    top: calc(0px - 1125px);
  }
  .board .game .item .card img.front.card_16 {
    top: calc(0px - 1200px);
  }
  .board .game .item .card img.front.card_17 {
    top: calc(0px - 1275px);
  }
}

.board .game .item.turned .card, .board .game .item.valid .card {
  transform: rotateY(180deg);
}

@media (max-width: 1000px) {
  .board {
    width: calc(9 * 75px + 9 * 4px);
  }
  .board .game .item {
    width: 75px;
    height: 75px;
    margin: 2px;
  }
}

@media (max-width: 500px) {
  .board {
    width: calc(4 * 75px + 4 * 4px);
  }
}

.counterPair {
  width: calc(9 * 100px + 9 * 10px);
  margin: 0 auto;
  margin-top: 15px;
  display: none;
}

.counterPair p {
  text-align: center;
}

.counterPair.display {
  display: block;
}

@media (max-width: 1000px) {
  .counterPair {
    width: calc(9 * 75px + 9 * 4px);
  }
}

@media (max-width: 500px) {
  .counterPair {
    width: calc(4 * 75px + 4 * 4px);
  }
}

.progressBar {
  position: relative;
  height: 20px;
  width: calc(9 * 100px + 9 * 10px);
  margin: 0 auto;
  margin-top: 20px;
  background: #a2a2a2;
  display: none;
}

.progressBar.display {
  display: block;
}

.progressBar .bar {
  position: absolute;
  width: 100%;
  height: 100%;
}

.progressBar .bar.green {
  background: #13a200;
}

.progressBar .bar.orange {
  background: #d07d00;
}

.progressBar .bar.red {
  background: #d00000;
}

@media (max-width: 1000px) {
  .progressBar {
    width: calc(9 * 75px + 9 * 4px);
  }
}

@media (max-width: 500px) {
  .progressBar {
    width: calc(4 * 75px + 4 * 4px);
  }
}

@media (max-width: 400px) {
  .progressBar {
    margin-bottom: 20px;
  }
}

.introduction {
  width: 90%;
  max-width: 350px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.introduction.remove {
  display: none;
}

.introduction .leaderBoard {
  width: 100%;
}

.introduction button {
  background: none;
  border: none;
  text-transform: uppercase;
  margin: 0 auto;
  cursor: pointer;
  border: 1px solid #000;
  background: transparent;
  padding: 5px 20px;
  transition: all 0.3s ease-in-out;
}

.introduction button:hover {
  background: #151515;
  color: #fff;
}
/*# sourceMappingURL=main.css.map */